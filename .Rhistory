arrange(res,pvals)
res[with(res,order(pvals,BH)),]
order(pvals,BH)
order(res$pvals)
res=as.data.frame(res)
res[with(res,order(pvals)),]
res<-res[with(res,order(pvals)),]
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
res<-res[with(res,order(pvals,decreasing=FALSE)),]
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
view(res)
View(res)
qplot(res)
ggplot(res)
library(ggplot2)
qplot(res)
ggplot(res)
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
View(res)
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
cex=0.7)
?abline
?matlines
?legend
qplot(pvals, BH, BONF, data=res)+geom_smooth()
qplot(pvals, BH, BONF, data=res)
qplot(pvals,data=res)
qplot(pvals, row.names(res),data=res)
qplot(row.names(res), pvals, data=res)
fishers_data[,2]
res$pvals
length(res$pvals)
res[with(res,order(pvals,decreasing=false))]
res[with(res,order(pvals,decreasing=FALSE))]
order(pvals,decreasing=FALSE,data=res)
order(res$pvals,decreasing=FALSE)
res$pvals[1465]
data<-read.table('P:\\o_drive\\Homes\\jearl\\HI\\dist_com_v_virulent.tsv', header=TRUE)
dataSumC<-rowSums(data[,1:64])
dataSumV<-rowSums(data[,65:183])
pres_abs<-cbind(dataSumC,dataSumV,64-dataSumC,119-dataSumC)
colnames(pres_abs)<-c("PresCom","PresVir","AbsCom","AbsVir")
#fisher.test(rbind(pres_abs[1,1:2],pres_abs[1,3:4]))
fishers_data<-matrix(nrow=1,ncol=2)
colnames(fishers_data)<-cbind("cluster","pvalue")
for(i in 1:length(pres_abs[,1])){
curr_test<-fisher.test(rbind(pres_abs[i,1:2],pres_abs[i,3:4]))
fishers_data<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
}
fishers_data<-fishers_data[-1,]
BONF = p.adjust(fishers_data[,2], "bonferroni")
BH = p.adjust(fishers_data[,2], "BH")
res = as.data.frame(cbind(pvals=fishers_data[,2], BH=round(BH, 3), BONF=round(BONF, 3)))
row.names(res)<-fishers_data[,1]
res=as.data.frame(res)
res<-res[with(res,order(pvals, decreasing=FALSE)),]
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
data_trans<-t(data)
virulence<-grepl("V",row.names(data_trans))
lm_results<-lm(
as.formula(paste("virulence", "~",
paste(colnames(data_lm)[c(1:1465)], collapse = "+"),
sep = ""
)
),
data=data_lm
)
data<-read.table('P:\\o_drive\\Homes\\jearl\\HI\\dist_com_v_virulent.tsv', header=TRUE)
dataSumC<-rowSums(data[,1:64])
dataSumV<-rowSums(data[,65:183])
pres_abs<-cbind(dataSumC,dataSumV,64-dataSumC,119-dataSumC)
colnames(pres_abs)<-c("PresCom","PresVir","AbsCom","AbsVir")
#fisher.test(rbind(pres_abs[1,1:2],pres_abs[1,3:4]))
fishers_data<-matrix(nrow=1,ncol=2)
colnames(fishers_data)<-cbind("cluster","pvalue")
for(i in 1:length(pres_abs[,1])){
curr_test<-fisher.test(rbind(pres_abs[i,1:2],pres_abs[i,3:4]))
fishers_data<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
}
fishers_data<-fishers_data[-1,]
BONF = p.adjust(fishers_data[,2], "bonferroni")
BH = p.adjust(fishers_data[,2], "BH")
res = as.data.frame(cbind(pvals=fishers_data[,2], BH=round(BH, 3), BONF=round(BONF, 3)))
row.names(res)<-fishers_data[,1]
res=as.data.frame(res)
res<-res[with(res,order(pvals, decreasing=FALSE)),]
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
data_trans<-t(data)
virulence<-grepl("V",row.names(data_trans))
data_lm<-as.data.frame(cbind(data_trans,virulence=virulence))
lm_results<-lm(
as.formula(paste("virulence", "~",
paste(colnames(data_lm)[c(1:1465)], collapse = "+"),
sep = ""
)
),
data=data_lm
)
fishers_data<-matrix(nrow=1,ncol=2)
pvals_gt_05<-matrix(nrow=1,ncol=2)
colnames(fishers_data)<-cbind("cluster","pvalue")
pvals_gt_05<-cbind("cluster","pvalue")
for(i in 1:length(pres_abs[,1])){
curr_test<-fisher.test(rbind(pres_abs[i,1:2],pres_abs[i,3:4]))
fishers_data<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
if(curr_test$p.value<.05){
pvals_gt_05<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
}
}
pvals_gt_05
ndx = which(pvals_gt_05$cluster %in% data)
pvals_gt_05$cluster
as.data.frame(pvals_gt_05)$cluster
ndx = which(as.data.frame(pvals_gt_05)$cluster %in% data)
ndx
which(as.data.frame(pvals_gt_05)$cluster %in% data)
which(as.data.frame(pvals_gt_05)$cluster %in% data$cluster)
source('P:/o_drive/Homes/jearl/HI/calc_statistics.r', echo=TRUE)
lm_results
#data has the original data from the tsv file, which is the presence absence of each gene cluster, per strain
data<-read.table('P:\\o_drive\\Homes\\jearl\\HI\\dist_com_v_virulent.tsv', header=TRUE)
#dataSumC has the sum total values for all commensal strains
dataSumC<-rowSums(data[,1:64])
#dataSumV has the sum total values for all virulent strains
dataSumV<-rowSums(data[,65:183])
#pres_abs has colums for the total present in Commensal Strains, Total present in Virulent Strains, Total absent from Commensal, and total absent from Virulent
pres_abs<-cbind(dataSumC,dataSumV,64-dataSumC,119-dataSumC)
colnames(pres_abs)<-c("PresCom","PresVir","AbsCom","AbsVir")
#fishers_data holds all the fisher's exact results for each gene cluster
fishers_data<-matrix(nrow=1,ncol=2)
#pvals_gt_05 holds all the fisher's exact results greater than .05
pvals_gt_05<-matrix(nrow=1,ncol=2)
colnames(fishers_data)<-cbind("cluster","pvalue")
pvals_gt_05<-cbind("cluster","pvalue")
#for loop to calculate fisher's exact on each gene cluster
for(i in 1:length(pres_abs[,1])){
curr_test<-fisher.test(rbind(pres_abs[i,1:2],pres_abs[i,3:4]))
fishers_data<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
if(curr_test$p.value<.05){
pvals_gt_05<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
}
}
#Get rid of annoying first column with NA values
fishers_data<-fishers_data[-1,]
#create vectors for the adjusted p-values
BONF = p.adjust(fishers_data[,2], "bonferroni")
BH = p.adjust(fishers_data[,2], "BH")
#res is a dataframe where the first column is the unadjusted p-vals, second the BH adjusted, and finally the Bonferroni corrected
res = data.frame(pvals=fishers_data[,2], BH=round(BH, 3), BONF=round(BONF, 3))#ASK JOSH; why did you have cbind with as.data.frame. It was turning numerics into factors
row.names(res)<-fishers_data[,1]#ASK JOSH why did you turn the cluster name into a row.name? Why not just make it a column
res$cluster <-fishers_data[,1]
#res=as.data.frame(res)# ASK JOSH why data.frame a data.frame
#sort the res dataframe (I think..)
res<-res[with(res,order(pvals, decreasing=FALSE)),]
#plot the values... probably don't need to label the nodes with numbers, but that's what the other guys did
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
#Set limits of testing
names(res)
bonflimit <- 0.01
bhlimit <- 0.05
#I have begun to love data.tables over data.frames
require(data.table)
res.dt <- data.table(res)
tables()
clustoi <- res.dt[BONF<bonflimit,cluster]#clustoi stands for clusters of interest
#To do the regression, have to transpose the data
data_trans<-t(data)
#Farrel's grep for whether a strain is virulent or not
virulence<-grepl("V",row.names(data_trans))
#data_lm is the transposed original data, with a virulence column.  as data frame
data_lm<-cbind(data.frame(data_trans),virulence=virulence)
#The regression, use all columns that meet bonferroni criteria or whatever except the final, which is the virulence column
# <-lm(
#    as.formula(paste("virulence", "~",
#                     paste(clustoi, collapse = "+"),
#                     sep = ""
#    )
#    ),
#    data=data_lm
# )
summary(glm(paste("virulence","~",paste(clustoi,collapse="+")),data=data_lm,family=binomial()))
#data has the original data from the tsv file, which is the presence absence of each gene cluster, per strain
data<-read.table('P:\\o_drive\\Homes\\jearl\\HI\\dist_com_v_virulent.tsv', header=TRUE)
#dataSumC has the sum total values for all commensal strains
dataSumC<-rowSums(data[,1:64])
#dataSumV has the sum total values for all virulent strains
dataSumV<-rowSums(data[,65:183])
#pres_abs has colums for the total present in Commensal Strains, Total present in Virulent Strains, Total absent from Commensal, and total absent from Virulent
pres_abs<-cbind(dataSumC,dataSumV,64-dataSumC,119-dataSumC)
colnames(pres_abs)<-c("PresCom","PresVir","AbsCom","AbsVir")
#fishers_data holds all the fisher's exact results for each gene cluster
fishers_data<-matrix(nrow=1,ncol=2)
#pvals_gt_05 holds all the fisher's exact results greater than .05
pvals_gt_05<-matrix(nrow=1,ncol=2)
colnames(fishers_data)<-cbind("cluster","pvalue")
pvals_gt_05<-cbind("cluster","pvalue")
#for loop to calculate fisher's exact on each gene cluster
for(i in 1:length(pres_abs[,1])){
curr_test<-fisher.test(rbind(pres_abs[i,1:2],pres_abs[i,3:4]))
fishers_data<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
if(curr_test$p.value<.05){
pvals_gt_05<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
}
}
#Get rid of annoying first column with NA values
fishers_data<-fishers_data[-1,]
#create vectors for the adjusted p-values
BONF = p.adjust(fishers_data[,2], "bonferroni")
BH = p.adjust(fishers_data[,2], "BH")
#res is a dataframe where the first column is the unadjusted p-vals, second the BH adjusted, and finally the Bonferroni corrected
res = data.frame(pvals=fishers_data[,2], BH=round(BH, 3), BONF=round(BONF, 3))#ASK JOSH; why did you have cbind with as.data.frame. It was turning numerics into factors
row.names(res)<-fishers_data[,1]#ASK JOSH why did you turn the cluster name into a row.name? Why not just make it a column
res$cluster <-fishers_data[,1]
#res=as.data.frame(res)# ASK JOSH why data.frame a data.frame
#sort the res dataframe (I think..)
res<-res[with(res,order(pvals, decreasing=FALSE)),]
#plot the values... probably don't need to label the nodes with numbers, but that's what the other guys did
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
#Set limits of testing
names(res)
bonflimit <- 0.01
bhlimit <- 0.05
#I have begun to love data.tables over data.frames
require(data.table)
res.dt <- data.table(res)
tables()
clustoi <- res.dt[BONF<bonflimit,cluster]#clustoi stands for clusters of interest
#To do the regression, have to transpose the data
data_trans<-t(data)
#Farrel's grep for whether a strain is virulent or not
virulence<-grepl("V",row.names(data_trans))
#data_lm is the transposed original data, with a virulence column.  as data frame
data_lm<-cbind(data.frame(data_trans),virulence=virulence)
#The regression, use all columns that meet bonferroni criteria or whatever except the final, which is the virulence column
# <-lm(
#    as.formula(paste("virulence", "~",
#                     paste(clustoi, collapse = "+"),
#                     sep = ""
#    )
#    ),
#    data=data_lm
# )
summary(glm(paste("virulence","~",paste(clustoi,collapse="+")),data=data_lm,family=binomial()))
#The regression, use all columns except the final, which is the virulence column
lm_results<-lm(
as.formula(paste("virulence", "~",
paste(colnames(data_lm)[c(1:1465)], collapse = "+"),
sep = ""
)
),
data=data_lm
)
install.packages("data.table")
#data has the original data from the tsv file, which is the presence absence of each gene cluster, per strain
data<-read.table('P:\\o_drive\\Homes\\jearl\\HI\\dist_com_v_virulent.tsv', header=TRUE)
#dataSumC has the sum total values for all commensal strains
dataSumC<-rowSums(data[,1:64])
#dataSumV has the sum total values for all virulent strains
dataSumV<-rowSums(data[,65:183])
#pres_abs has colums for the total present in Commensal Strains, Total present in Virulent Strains, Total absent from Commensal, and total absent from Virulent
pres_abs<-cbind(dataSumC,dataSumV,64-dataSumC,119-dataSumC)
colnames(pres_abs)<-c("PresCom","PresVir","AbsCom","AbsVir")
#fishers_data holds all the fisher's exact results for each gene cluster
fishers_data<-matrix(nrow=1,ncol=2)
#pvals_gt_05 holds all the fisher's exact results greater than .05
pvals_gt_05<-matrix(nrow=1,ncol=2)
colnames(fishers_data)<-cbind("cluster","pvalue")
pvals_gt_05<-cbind("cluster","pvalue")
#for loop to calculate fisher's exact on each gene cluster
for(i in 1:length(pres_abs[,1])){
curr_test<-fisher.test(rbind(pres_abs[i,1:2],pres_abs[i,3:4]))
fishers_data<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
if(curr_test$p.value<.05){
pvals_gt_05<-rbind(fishers_data,cbind(row.names(pres_abs)[i],curr_test$p.value))
}
}
#Get rid of annoying first column with NA values
fishers_data<-fishers_data[-1,]
#create vectors for the adjusted p-values
BONF = p.adjust(fishers_data[,2], "bonferroni")
BH = p.adjust(fishers_data[,2], "BH")
#res is a dataframe where the first column is the unadjusted p-vals, second the BH adjusted, and finally the Bonferroni corrected
res = data.frame(pvals=fishers_data[,2], BH=round(BH, 3), BONF=round(BONF, 3))#ASK JOSH; why did you have cbind with as.data.frame. It was turning numerics into factors
row.names(res)<-fishers_data[,1]#ASK JOSH why did you turn the cluster name into a row.name? Why not just make it a column
res$cluster <-fishers_data[,1]
#res=as.data.frame(res)# ASK JOSH why data.frame a data.frame
#sort the res dataframe (I think..)
res<-res[with(res,order(pvals, decreasing=FALSE)),]
#plot the values... probably don't need to label the nodes with numbers, but that's what the other guys did
matplot(res, ylab="p-values", xlab="sorted outcomes")
abline(h=0.05, lty=2)
matlines(res)
legend(1, .9, legend=c("Bonferroni", "Benjamini-Hochberg", "Unadjusted"),
col=c(3, 2, 1), lty=c(3, 2, 1), cex=0.7)
#Set limits of testing
names(res)
bonflimit <- 0.01
bhlimit <- 0.05
#I have begun to love data.tables over data.frames
require(data.table)
res.dt <- data.table(res)
tables()
clustoi <- res.dt[BONF<bonflimit,cluster]#clustoi stands for clusters of interest
#To do the regression, have to transpose the data
data_trans<-t(data)
#Farrel's grep for whether a strain is virulent or not
virulence<-grepl("V",row.names(data_trans))
#data_lm is the transposed original data, with a virulence column.  as data frame
data_lm<-cbind(data.frame(data_trans),virulence=virulence)
#The regression, use all columns that meet bonferroni criteria or whatever except the final, which is the virulence column
# <-lm(
#    as.formula(paste("virulence", "~",
#                     paste(clustoi, collapse = "+"),
#                     sep = ""
#    )
#    ),
#    data=data_lm
# )
summary(glm(paste("virulence","~",paste(clustoi,collapse="+")),data=data_lm,family=binomial()))
#The regression, use all columns except the final, which is the virulence column
lm_results<-lm(
as.formula(paste("virulence", "~",
paste(colnames(data_lm)[c(1:1465)], collapse = "+"),
sep = ""
)
),
data=data_lm
)
pt?
;
?pt()
pt(.975, df=1)
PGMY11_primer_samples_perc_id_only <- read.delim("P:/o_drive/Homes/epowell/RRP/HPV Typing/PGMY11_primer_samples_perc_id_only.tsv")
viewData(PGMY11_primer_samples_perc_id_only)
viewData(PGMY11_primer_samples_perc_id_only)
??viewData
PGMY11_primer_samples_perc_id_only <- read.delim("P:/o_drive/Homes/epowell/RRP/HPV Typing/PGMY11_primer_samples_perc_id_only.tsv")
viewData(PGMY11_primer_samples_perc_id_only)
PGMY11_primer_samples_perc_id_only <- read.delim("P:/o_drive/Homes/epowell/RRP/HPV Typing/PGMY11_primer_samples_perc_id_only.tsv")
viewData(PGMY11_primer_samples_perc_id_only)
library(mclust)
install.packages("mclust")
gpMclust<-Mclust(gp5_)
gp5_primer_samples_perc_id_only
list
ls
gp5_primer_samples_perc_id_only <- read.delim("P:/o_drive/Homes/epowell/RRP/HPV Typing/gp5_primer_samples_perc_id_only.tsv")
viewData(gp5_primer_samples_perc_id_only)
rstudio::viewData(PGMY11_primer_samples_perc_id_only)
ls()
gp_Mclust<-Mclust(gp5_primer_samples_perc_id_only[2:6])
summary(gp_Mclust)
gp_Mclust
Mclust(gp5_primer_samples_perc_id_only[2:6])
Mclust(gp5_primer_samples_perc_id_only[2:3])
Mclust(gp5_primer_samples_perc_id_only[,2:6])
image(gp5_primer_samples_perc_id_only[,2:6])
gp5_primer_samples_perc_id_only?
;
?gp5_primer_samples_perc_id_only
rstudio::viewData(PGMY11_primer_samples_perc_id_only)
gp_matrix<-data.matrix(gp5_primer_samples_perc_id_only[,2:6], rownames.force=NA)
fix(gp_Mclust)
rstudio::viewData(gp_matrix)
rstudio::viewData(gp5_primer_samples_perc_id_only)
rstudio::viewData(gp_matrix)
image(gp_matrix)
persp(gp_matrix)
persp(gp_matrix, expand=.2)
rstudio::viewData(gp5_primer_samples_perc_id_only)
summary(gp_Mclust)
gp_Mclust.modelName
fMclust<-Mclust(faithful)
summary(fMclust)
unload(Mclust)
install.packages("mclust")
library(mclust)
summary(fMclust)
fMclust<-Mclust(faithful)
summary(fMclust)
install.packages("mclust")
gp_Mclust<-gp5_primer_samples_perc_id_only
summary(gp_Mclust)
gp_Mclust<-Mclust(gp5_primer_samples_perc_id_only)
library(mclust)
gp_Mclust<-Mclust(gp5_primer_samples_perc_id_only)
summary(gp_Mclust)
plot(gp_Mclust)
gp_Mclust<-Mclust(gp5_primer_samples_perc_id_only[,2:6])
summary(gp_Mclust)
plot(gp_Mclust)
gp_16_11_only_Mclust<-Mclust(gp5_primer_samples_perc_id_only[,2:3])
summary(gp_16_11_only_Mclust)
plot(gp_16_11_only_Mclust)
gp_16_11_only_Mclust
names(gp_16_11_only_Mclust)
gp_16_11_only_Mclust.modelName
gp_16_11_only_Mclust$modelName
gp_16_11_only_Mclust$parameters
gp_16_11_only_Mclust$uncertainty
plot(gp_16_11_only_Mclust$uncertainty)
summary(gp_Mclust)
install.packages("bayesclust")
library(bayesclust)
??bayesclust
names(gp_Mclust)
gp_Mclust$classification
c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1])
viewdata(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio::viewdata(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio:viewdata(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
??rstuio
??rstudio
rstudio::viewData(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio::viewData(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio:viewdata(cbind(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio::viewData(cbind(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
install.packages("knitr")
Mclust?
;
?Mclust
rstudio::viewData(cbind(gp_Mclust$classification,gp_Mclust$z))
gp_Mclust$d
gp_Mclust$G
gp_Mclust$bic
gp_Mclust$loglik
gp_Mclust$df
summary(gp_Mclust, parameters=TRUE)
plot(hclust(gp5_primer_samples_perc_id_only[,2:6]))
?dist
grep(pattern="honeye.",x=c("none", "honeye.", "honeyer", "honeye66"), ignore.case=TRUE, value=TRUE)
grep(pattern="honeye.",x=c("none", "honeye.", "honeyer", "honeye66"), ignore.case=TRUE, value=FALSE)
gsub(pattern="honeye.",x=c("none", "honeye.", "honeyer", "honeye66"), replacement="dontknow", ignore.case=TRUE)
gsub(pattern="honeye[^6]+",x=c("none", "honeye.", "honeyer", "honeye66"), replacement="dontknow", ignore.case=TRUE)
gsub(pattern="honeye[^7]+",x=c("none", "honeye.", "honeyer", "honeye66"), replacement="dontknow", ignore.case=TRUE)
library(mclust)
#Load up the data from the alignments
data<-read.table("P:\\o_drive\\Homes\\epowell\\RRP\\all_against_all_matrix_ggsearch", header=TRUE, sep=" ")
data
gp5_primer_samples_perc_id_only <- read.delim("P:/o_drive/Homes/epowell/RRP/HPV Typing/gp5_primer_samples_perc_id_only.tsv")
PGMY11_primer_samples_perc_id_only <- read.delim("P:/o_drive/Homes/epowell/RRP/HPV Typing/PGMY11_primer_samples_perc_id_only.tsv")
Mclust(gp5_primer_samples_perc_id_only[,2:6])
require(Mclust)
library(Mclust)
require(mclust)
Mclust(gp5_primer_samples_perc_id_only[2:6])
summary(Mclust(gp5_primer_samples_perc_id_only[2:6]))
plot(Mclust(gp5_primer_samples_perc_id_only[2:6]))
mclust_gp5 <- Mclust(gp5_primer_samples_perc_id_only[2:6])
summary(mclust_gp5)
mclust_pgmy11<-Mclust(PGMY11_primer_samples_perc_id_only[2:6])
summary(mclust_pgmy11)
gp5_BIC <- mclustBIC(gp5_primer_samples_perc_id_only)
summary(gp5_BIC, data = gp5_primer_samples_perc_id_only)
plot(gp5_BIC, legendArgs = list(x = 'topleft'))
c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1])
gp_Mclust$classification
viewdata(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio::viewData(c(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
rstudio::viewData(cbind(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
library(rstudio)
rstudio::viewData(cbind(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1]))
cbind(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1])
results <- cbind(gp_Mclust$classification,gp5_primer_samples_perc_id_only[,1])
View(results)
summary(mclust_pgmy11)
plot(mclust_pgmy11, legendArgs = list(x = 'topleft'))
summary(gp5_BIC, data = gp5_primer_samples_perc_id_only)
summary(gp_Mclust)
summary(gp5_BIC, data = gp5_primer_samples_perc_id_only)
gp5_BIC <- mclustBIC(gp5_primer_samples_perc_id_only[2:6])
```
gp5_primer_samples_perc_id_only[2:6]
summary(gp5_BIC, data = gp5_primer_samples_perc_id_only)
pgmy_BIC <- mclustBIC(PGMY11_primer_samples_perc_id_only[2:6])
summary(pgmy_BIC, data = PGMY11_primer_samples_perc_id_only)
summary(pgmy_BIC)
summary(mclust_pgmy11)
plot(mclust_pgmy11)
View(PGMY11_primer_samples_perc_id_only)
View(data)
